/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Chat;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.List;
import java.util.ArrayList;

import javax.swing.JOptionPane;

/**
 * The GUI class of the client window which also contains all the method that
 * required for communication with the server (Except the serialization method
 * which is in SerializeDeserialize class.
 *
 * @author Eli Eliyahu 312328016 Noam Gruber 312325384
 */
public class ClientFrame extends javax.swing.JFrame {

  //  final int SERVER_PORT = 2541;  //Which port the server listening to.
    //Make sure same port if specified in the ServerFrame file
    Socket socket = null;           // Socket object for the current client
    PrintWriter out = null;         // Socket output to server - for sending data through the socket to the server
    BufferedReader in = null;       // Socket input from server - for reading server's data
    ClientInfoSeirialized info;     //All the info the client send to the server will be here
    private int portNumber;
    private String serverAddress;
    private String username;
    private Connection conn; 
    /**
     * Creates new form ClientFrame
     */
    public ClientFrame() {
        initComponents();
        try {
            conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/basedata", "root", "admin");
            // Replace "username" and "password" with your MySQL credentials
        } catch (SQLException e) {
            // Handle SQLException
            e.printStackTrace();
        }
   
      

    new Thread() {
        @Override
        public void run() {
            try {
                // Try establishing the socket connection between the client and the server
                socket = new Socket(serverAddress, portNumber);
                // Send to the server // open a PrintWriter on the socket
                out = new PrintWriter(socket.getOutputStream(), true);
                // Receive from the server // open a BufferedReader on the socket
                in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
                // Connection is established

                // Initialize the 'info' object and set only the name
                info = new ClientInfoSeirialized();

                info.name = username;

                // First message to the server is the client's name
                out.println(info.name);
                List<String> oldMessages = retrieveMessages(info.name);
                if (!oldMessages.isEmpty()) {
                    
                    for (String message : oldMessages) {
                    	txtChat.append(message + "\n");
                    }
                }

                try {
                    String line;
                    while ((line = in.readLine()) != null) {
                        txtChat.append(line + "\n");
                    }
                } catch (IOException e) {
                    // Handle IO Exception
                }
            } catch (IOException e) {
                // Handle IO Exception
            } finally {
                clostSockInOut();
            }
        }
    }.start();
}
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnWhoOnline = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtChat = new javax.swing.JTextArea();
        txtSendTo = new javax.swing.JTextField();
        txtMyMSG = new javax.swing.JTextField();
        btnSend = new javax.swing.JButton();
        logoutb = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1030, 479));
        setResizable(false);
        getContentPane().setLayout(null);

        btnWhoOnline.setText("Contact");
        btnWhoOnline.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnWhoOnlineActionPerformed(evt);
            }
        });
        getContentPane().add(btnWhoOnline);
        btnWhoOnline.setBounds(6, 71, 120, 50);

        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });
        getContentPane().add(btnClear);
        btnClear.setBounds(6, 154, 120, 50);

        txtChat.setColumns(20);
        txtChat.setRows(5);
        jScrollPane1.setViewportView(txtChat);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(161, 38, 813, 297);

        txtSendTo.setText("all");
        getContentPane().add(txtSendTo);
        txtSendTo.setBounds(130, 370, 110, 40);
        getContentPane().add(txtMyMSG);
        txtMyMSG.setBounds(270, 350, 552, 71);

        btnSend.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/icons8-send-64.png"))); // NOI18N
        btnSend.setText("Send");
        btnSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendActionPerformed(evt);
            }
        });
        getContentPane().add(btnSend);
        btnSend.setBounds(860, 350, 84, 71);

        logoutb.setText("Logout");
        logoutb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                logoutbMouseClicked(evt);
            }
        });
        getContentPane().add(logoutb);
        logoutb.setBounds(6, 233, 120, 50);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Send button pressed. This method calls sendMsg method which is in charge
     * of sending data to the server through the socket.
     *
     * @param evt Is not used
     */
    private void btnSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendActionPerformed
        sendMsg();
    }//GEN-LAST:event_btnSendActionPerformed

    /**
     * Clear button pressed. Calls the method clearChat who is in charge of
     * clearing completely the text box where is all the information about the
     * chat.
     *
     * @param evt Is not used
     */
    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        clearChat();
    }//GEN-LAST:event_btnClearActionPerformed

    /**
     * Who is Online button pressed. Calls the method showOnlineClients who is
     * in charge of retrieving the list with names of all the connected clients.
     *
     * @param evt Is not used
     */
    private void btnWhoOnlineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnWhoOnlineActionPerformed
        showOnlineClients();
    }//GEN-LAST:event_btnWhoOnlineActionPerformed

    private void logoutbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logoutbMouseClicked
   int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to logout?", "Logout Confirmation", JOptionPane.YES_NO_OPTION);
    if (confirm == JOptionPane.YES_OPTION) {
        // Close the socket and input/output streams
        clostSockInOut();
        // Exit the application
        System.exit(0);
    }
    
     }//GEN-LAST:event_logoutbMouseClicked

    /**
     * Clears completely the text box where is all the information about the
     * chat.
     */
    private void clearChat() {
        txtChat.setText("");
    }

private void sendMsg() {
    new Thread() {
        @Override
        public void run() {
            try {
                info.name = username;
           
                info.msg = txtMyMSG.getText();
               
                info.recipient = txtSendTo.getText();
                System.out.println(info.msg);
                System.out.println(info.recipient);
                System.out.println("howa hada    "+info.recipient);
                out.println(info.name +","+info.msg+","+info.recipient+","+"false");
                if(info.recipient.equals("all")) {
                	saveMessageToDB(info.name, info.msg, info.recipient,"all");
                }
                else {
                	saveMessageToDB(info.name, info.msg, info.recipient,"private");
                }
                txtMyMSG.setText("");
            } catch (Exception e) {
                txtChat.append("<Problem sending the message>\n");
            }
            //The thread dies
        }
    }.start();
}

private void showOnlineClients() {
    new Thread() {
        @Override
        public void run() {
            try {
                info.showOnline = true;
                out.println(",,,"+info.showOnline);
                info.showOnline = false;
            } catch (Exception e) {
                txtChat.append("<Problem getting online clients list>\n");
                e.printStackTrace();
            }
            //The thread dies
        }
    }.start();
}

    private void clostSockInOut() {
        if (socket != null) {
            try {
                socket.close();
            } catch (IOException ex) {
            }
        }
        if (in != null) {
            try {
                in.close();
            } catch (IOException ex) {
            }
        }
        if (out != null) {
            out.close();
        }
    }
    public void setPortNumber(int portNumber) {
        this.portNumber = portNumber;
    }
    
    
  public void  setAddserv(String serverAddress ){
    this.serverAddress = serverAddress;;
} 
   
  
  
  
    public void  setusername(String username ){
    this.username = username;
} 
  
   
    private void saveMessageToDB(String sender, String message, String recipient,String type) {
        try {
            // Establish a connection to the MySQL database
            Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/basedata", "root", "admin");

            // Create a PreparedStatement for inserting a new message into the database
            String query = "INSERT INTO messages2 (sender_name, recipient_name, message, timestamp, message_type) VALUES (?, ?, ?, ?, ?)";
            PreparedStatement stmt = conn.prepareStatement(query);
            stmt.setString(1, sender);
            stmt.setString(2, recipient);
            stmt.setString(3, message);
            stmt.setTimestamp(4, new Timestamp(System.currentTimeMillis()));
            stmt.setString(5, type); // or "private" depending on the message type
            
            // Execute the INSERT statement
            int rowsInserted = stmt.executeUpdate();
            
            if (rowsInserted > 0) {
                System.out.println("Message saved to the database successfully.");
            } else {
                System.out.println("Failed to save the message to the database.");
            }

            // Close the PreparedStatement and database connection
            stmt.close();
            conn.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
 
  
    public static List<String> retrieveMessages(String name) {
        List<String> messages = new ArrayList<>();
        Connection conn = null;
        PreparedStatement stmt = null;
        PreparedStatement stmt1 = null;
        ResultSet rs = null;
        ResultSet rs1 = null;
        String url = "jdbc:mysql://localhost:3306/basedata";
        String username = "root";
        String password = "admin";
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            conn = DriverManager.getConnection(url, username, password);
            String sql = "SELECT * FROM messages2 WHERE  message_type = 'private' and (sender_name=? or recipient_name=?) ORDER BY timestamp ASC";
            String sql2 = "SELECT * FROM messages2 WHERE message_type = 'all' ORDER BY timestamp ASC";
            stmt = conn.prepareStatement(sql);
            stmt.setString(1, name);
            stmt.setString(2, name);
            stmt1 = conn.prepareStatement(sql2);

            rs = stmt.executeQuery();
            rs1 = stmt1.executeQuery();
            while (rs.next()) {
                String sender = rs.getString("sender_name");
                String messageText = rs.getString("message");
                String receive = rs.getString("recipient_name");
                Timestamp sentAt = rs.getTimestamp("timestamp");
               
                messages.add("[Pivate] from " + sender +" to "+receive+"(" + sentAt.toString() + "): " + messageText);
                
            }
            while (rs1.next()) {
                String sender = rs1.getString("sender_name");
                String messageText = rs1.getString("message");
                Timestamp sentAt = rs1.getTimestamp("timestamp");
                
                 
                        messages.add("[all] " + sender + " (" + sentAt.toString() + "): " + messageText);
                    
                
            }
        } catch (ClassNotFoundException | SQLException e) {
            e.printStackTrace();
        } finally {
            try { rs.close(); } catch (Exception e) {  }
            try { stmt.close(); } catch (Exception e) { }
            try { conn.close(); } catch (Exception e) { }
        }
        return messages;
  
    }
  
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClientFrame().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnSend;
    private javax.swing.JButton btnWhoOnline;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton logoutb;
    private javax.swing.JTextArea txtChat;
    private javax.swing.JTextField txtMyMSG;
    private javax.swing.JTextField txtSendTo;
    // End of variables declaration//GEN-END:variables

}
